prometheus-operator:
  prometheus:
    prometheusSpec:
      replicas: 1
      retention: 4h
      image:
        tag: v2.20.0
      # this is needed to make prometheus-operator do the expected thing and
      # actually use servicemonitors and prometheusrules created 'from outside'
      # the helm chart.
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelector: {}
      podMonitorSelectorNilUsesHelmValues: false
      podMonitorNamespaceSelector: {}
      podMonitorSelector: {}
      ruleSelectorNilUsesHelmValues: false
      ruleNamespaceSelector: {}
      ruleSelector: {}
      prometheusExternalLabelNameClear: true
      thanos:
        baseImage: thanosio/thanos
        tag: v0.15.0

  grafana:
    adminPassword: admin
    additionalDataSources:
    - name: Prometheus
      type: prometheus
      url: http://thanos-query-http:10902
      access: proxy
      isDefault: true
    sidecar:
      datasources:
        enabled: true
        defaultDatasourceEnabled: false
        label: grafana_datasource
      dashboards:
        enabled: true
        label: grafana_dashboard

image:
  repository: thanosio/thanos
  tag: v0.15.0
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

# Thanos store configuration
store:
  enabled: true
  replicas: 1

  logLevel: info

  minTime: ""
  maxTime: ""

  readiness:
    initialDelaySeconds: 300

  liveness:
    initialDelaySeconds: 300

  deployment:
    annotations: {}

  grpcService:
    annotations: {}

  httpService:
    type: ClusterIP
    externalTrafficPolicy: ""
    annotations: {}

  ingress:
    host: ""
    annotations:
      ingress.kubernetes.io/protocol: h2c

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Thanos query configuration
query:
  enabled: true
  replicas: 1
  logLevel: info

  # enable --grpc-client-tls-secure
  secure: false

  # https://github.com/improbable-eng/thanos/issues/1015
  storeDNSResolver: miekgdns
  stores:
    - dnssrv+_grpc._tcp.thanos-store-grpc.thanos.svc.cluster.local
    - dnssrv+_grpc._tcp.thanos-sidecar-grpc.thanos.svc.cluster.local
  queryReplicaLabel: prometheus_replica

  deployment:
    annotations: {}

  grpcService:
    annotations: {}

  httpService:
    type: ClusterIP
    externalTrafficPolicy: ""
    annotations: {}

  grpcIngress:
    host: ""
    annotations:
      ingress.kubernetes.io/protocol: h2c

  httpIngress:
    host: ""
    annotations: {}

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""

# Thanos tool bucket web configuration
bucketweb:
  enabled: true
  replicas: 1

  logLevel: info

  deployment:
    annotations: {}

  service:
    type: ClusterIP
    externalTrafficPolicy: ""
    annotations: {}

  ingress:
    host: ""
    annotations: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Thanos tool bucket web configuration
queryfrontend:
  enabled: true
  replicas: 1

  downstreamURL: "http://thanos-query-http:10902"
  logLevel: info
  splitInterval: 24h

  cache:
    max_size: ""
    max_size_items: 0
    validity: 0s

  deployment:
    annotations: {}

  service:
    type: ClusterIP
    externalTrafficPolicy: ""
    annotations: {}

  ingress:
    host: ""
    annotations: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Thanos compact configuration
compact:
  enabled: true
  replicas: 1

  syncDelay: 30m
  retentionResolutionRaw: 0d
  retentionResolution5m: 0d
  retentionResolution1h: 0d
  wait: true

  logLevel: info

  nodeSelector: {}

  deployment:
    annotations: {}

  httpService:
    type: ClusterIP
    externalTrafficPolicy: ""
    annotations: {}

sidecar:
  httpService:
    type: ClusterIP
    externalTrafficPolicy: ""

  ingress:
    basename: ""
    domain: ""
    annotations:
      ingress.kubernetes.io/protocol: h2c
